using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using System.Text;
using System.Threading.Tasks;

namespace recursion
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //print the first 50 natural numbers using recursion.
            //PrintNaturalNumbers(50);

            //calculate the sum of numbers from 1 to n using recursion.
            // Console.WriteLine(Calculate(5));

            //print the array elements using recursion.
            //Console.Write("Input the number of elements to be stored in the array :");
            //int number=int.Parse(Console.ReadLine());
            //int[] array = new int[number];
            //for(int i = 0; i <= number-1; i++)
            // {
            // array[i] = int.Parse(Console.ReadLine());
            //}
            //PrintArray(array, 0);

            //count the digits of a given number using recursion.
            //int n=int.Parse(Console.ReadLine());
            //string str =n.ToString();
            //int count = DigitNumber(0, str);
            //Console.WriteLine("The number of digits in the number is : " + count);

            //find the sum of digits of a number using recursion.
            // int sum = SumDigit(0,str);
            //Console.WriteLine($"The Sum of digits of {n} = {sum}");

            //get the largest element of an array using recursion. 
            //int Maxnumb =PrintLargElement(array,number-1);
            //Console.WriteLine("Largest element of an array is: " + Maxnumb);

            //to reverse a string using recursion.
            //string word =Console.ReadLine();
            //ReversString(word,word.Length-1);

            //print the Fibonacci Series using recursion.
            //Console.Write("Input number of terms for the Series (< 20) :") ;
            //int numb=int.Parse(Console.ReadLine());
            //for (int i = 0; i < numb; i++)//for loop to print the Fibonacci Series.
            //{
            //  Console.WriteLine(CalculateFibonacci(i));
            //}

            //find the GCD of two numbers using recursion.
            //Console.WriteLine("Enter the first number: ");
            //int a = int.Parse(Console.ReadLine());
            //Console.WriteLine("Enter the second number: ");
            //int b = int.Parse(Console.ReadLine());
            //Console.WriteLine(FindGCD(a, b));

            //to find the Factorial of a number using recursion. 
            //Console.Write("Enter the number to find the Factorial: ");
            //int n = int.Parse(Console.ReadLine());
            //Console.WriteLine( Factorial(n));

            //convert a decimal number to binary using recursion.
            //Console.Write("Input any decimal number : ");
            //int n = int.Parse(Console.ReadLine());
            //ConvertDecimalToBinary(n);

            //to check if a number is a prime number or not using recursion.
            Console.Write("Input any positive number : ");
            int n = int.Parse(Console.ReadLine());
            PrimeNumber(n);

            Console.ReadLine();
        }
        //print the first 50 natural numbers using recursion.
        public static void PrintNaturalNumbers(int n)
        {
            if (n == 0)
            {
                return;
            }
            PrintNaturalNumbers(n-1);
             Console.WriteLine(n);
        }
        //print the Fibonacci Series using recursion.
        public static int CalculateFibonacci(int n)
        {
            if (n == 0)
            {
                return 0;//Base case
            }
            return CalculateFibonacci(n - 1) + CalculateFibonacci(n - 2);//recursion call.
        }
        //calculate the sum of numbers from 1 to n using recursion.
        public static int Calculate(int n) 
        {
            if (n == 0) {
              return 1;//base case
            }
            return n+Calculate(n-1);//recursion call and sum the result with n. 
        }
        public static void PrintArray(int[] array,int i)
        {
            if (array.Length==i)
            {
              return ;
            }
            Console.WriteLine(array[i]);
            PrintArray(array,i+1);
        }
        //count the digits of a given number using recursion. 
        public static int DigitNumber(int n,string str) 
        {
            if (str.Length == n)
            {
                return n;
            }
             return  DigitNumber(n+1,str);
        }
        public static int SumDigit(int n, string str)
        {
            if (n>str.Length-1)
            {
                return 0;
            }
            int current= int.Parse(str[n].ToString());
            return current + SumDigit(n+1,str);

        }
        public static int PrintLargElement(int[] array, int i)
        {
            if ( i==0)
            {
                return array[0];
            }
            int Max = PrintLargElement(array, i - 1);
            return array[i] > Max ? array[i]:Max;

            
        }
        public static void ReversString(string str, int i)
        {
            if (i<0)
            {
                return ;
            }

            Console.Write(str[i]);
             ReversString(str, i-1);
        }
        //find the GCD of two numbers using recursion.
        public static int FindGCD(int number1,int number2)
        {
            if (number2 == 0)
            {
                return number1;
            }
            return FindGCD(number2, number1%number2);    
        }
        //to find the Factorial of a number using recursion. 
        public static int Factorial(int number)
        {
            if(number==0)
            {
                return 1;
            }
            return Factorial(number-1)*number;
        }
        //convert a decimal number to binary using recursion.
        public static void ConvertDecimalToBinary(int number)
        {
            if (number==0)
            {
                return ;
            }
            ConvertDecimalToBinary(number / 2);
            if (number % 2 == 0)
            {
                Console.Write(0);
            }
            else if(number % 2 == 1)
            {
                Console.Write(1);
            }
        }
        //to check if a number is a prime number or not using recursion.
        public static void PrimeNumber(int number)
        {
            if(number == 0)
            {
                return ;
            }
           
            if(number%2==0 && number!=2)
            {
                Console.Write($"The number {number} is not a prime number");
            }
            else if (number % 3 == 0 && number != 3)
            {
                Console.Write($"The number {number} is not a prime number");
            }
            else 
            {
                Console.Write($"The number {number} is a prime number");
            }
              PrimeNumber(number%number);

        }

    }
}
